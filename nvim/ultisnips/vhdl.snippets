snippet --=
--
--  $0
--
endsnippet

snippet __comment=
--
--  NOTE      - `!v expand('%:t')`
--  Author    - ${1:Aru}
--
--  Created   - `date +%Y.%m.%d`
`!p
def format_comment(path):
  front = "--  "
  if path.startswith("Chae"):
    retval = front + "Website   - http://www.solidwintech.co.kr\n" + \
             front + "Contact   - chaelj@solidwt.co.kr"
  else:
    retval = front + "Github    - https://github.com/aruyu\n" + \
             front + "Contact   - vine9151@gmail.com"
  return retval

snip.rv = format_comment(t[1])
`
--

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

$0
endsnippet

snippet entity
entity ${1} is
PORT
(
    ${2}
);
end $1;

$0
endsnippet

snippet architecture
architecture ${1:Behavioral} of ${2} is

    ${3}

begin

    $0

end $1;
endsnippet

snippet component
component ${1} is
PORT
(
    ${2}
);
end component;

$0
endsnippet

snippet map
${1} : ${2}
PORT MAP
(
    ${3}
);

$0
endsnippet

snippet type
type ${1} is
(
    ${2}
);

$0
endsnippet


snippet port
$0 : ${1} ${2:STD_LOGIC};
endsnippet

snippet portvector
$0 : ${1} ${2:STD_LOGIC_VECTOR} ( ${3} downto 0 );
endsnippet

snippet signal
signal $0 : ${1} ${2:STD_LOGIC};
endsnippet

snippet signalvector
signal $0 : ${1} ${2:STD_LOGIC_VECTOR} ( ${3} downto 0 );
endsnippet

snippet process "automake process" b
process (${1:resetN, }):
begin
    `!p
def format_class(path):
  parts = path.split(',')
  if path.startswith("resetN,"):
    retval = "if (resetN = '0') then"
  else:
    retval = "if rising_edge ( " + parts[0] + " ) then"

  return retval

snip.rv = format_class(t[1])
`
        ${2}`!p
def format_class(path):
  parts = path.split(',')
  if path.startswith("resetN,"):
    retval = "\n    elsif rising_edge (" + parts[1] + " ) then\n        "
  else:
    retval = ""

  return retval

snip.rv = format_class(t[1])
`$0
    end if;
end process;
endsnippet

snippet if
if (${1}) then
    $0
endsnippet

snippet else
else then
    $0
end if;
endsnippet

snippet elif
elsif (${1}) then
    $0
endsnippet

snippet ifelse
if (${1}) then
    ${2}
else then
    $0
end if;
endsnippet

snippet endif
end if;
$0
endsnippet

snippet case
case (${1}) is
    when ${2:0} =>
        ${3}
    when others =>
        $0
end case;
endsnippet

snippet "([\S]+(\-[\S]+)+)" "kebab-case to snake_case" r
`!p snip.rv = re.sub('-','_', match.group(1))`$0
endsnippet
